{
    "sourceFile": "frontend/src/services/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749581978847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749585559174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,12 @@\n const API_BASE_URL = 'http://localhost:5000/api';\r\n \r\n // Helper function for API requests\r\n const apiRequest = async (endpoint, options = {}) => {\r\n-  const token = localStorage.getItem('token');\r\n-  \r\n   const defaultHeaders = {\r\n     'Content-Type': 'application/json',\r\n   };\r\n   \r\n-  if (token) {\r\n-    defaultHeaders['Authorization'] = `Bearer ${token}`;\r\n-  }\r\n-  \r\n   const config = {\r\n     ...options,\r\n     headers: {\r\n       ...defaultHeaders,\r\n"
                }
            ],
            "date": 1749581978847,
            "name": "Commit-0",
            "content": "// API service for making HTTP requests to the backend\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Helper function for API requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  const defaultHeaders = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n  \r\n  if (token) {\r\n    defaultHeaders['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  \r\n  const config = {\r\n    ...options,\r\n    headers: {\r\n      ...defaultHeaders,\r\n      ...options.headers,\r\n    },\r\n  };\r\n  \r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'An error occurred while fetching data');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API request error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Patients API\r\nexport const patientsApi = {\r\n  getAll: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/patients?${queryParams.toString()}`);\r\n  },\r\n  getById: (id) => apiRequest(`/patients/${id}`),\r\n  create: (data) => apiRequest('/patients', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  update: (id, data) => apiRequest(`/patients/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  delete: (id) => apiRequest(`/patients/${id}`, {\r\n    method: 'DELETE',\r\n  }),\r\n};\r\n\r\n// Doctors API\r\nexport const doctorsApi = {\r\n  getAll: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/doctors?${queryParams.toString()}`);\r\n  },\r\n  getById: (id) => apiRequest(`/doctors/${id}`),\r\n  getSpecializations: () => apiRequest('/doctors/specializations'),\r\n  create: (data) => apiRequest('/doctors', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  update: (id, data) => apiRequest(`/doctors/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  delete: (id) => apiRequest(`/doctors/${id}`, {\r\n    method: 'DELETE',\r\n  }),\r\n};\r\n\r\n// Appointments API\r\nexport const appointmentsApi = {\r\n  getAll: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/appointments?${queryParams.toString()}`);\r\n  },\r\n  getById: (id) => apiRequest(`/appointments/${id}`),\r\n  getUpcoming: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/appointments/upcoming?${queryParams.toString()}`);\r\n  },\r\n  create: (data) => apiRequest('/appointments', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  update: (id, data) => apiRequest(`/appointments/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(data),\r\n  }),\r\n  cancel: (id) => apiRequest(`/appointments/${id}`, {\r\n    method: 'DELETE',\r\n  }),\r\n};\r\n\r\n// Wards API\r\nexport const wardsApi = {\r\n  getAll: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/wards?${queryParams.toString()}`);\r\n  },\r\n  getById: (id) => apiRequest(`/wards/${id}`),\r\n};\r\n\r\n// Medical Records API\r\nexport const medicalRecordsApi = {\r\n  getAll: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/medical-records?${queryParams.toString()}`);\r\n  },\r\n  create: (data) => apiRequest('/medical-records', {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n  }),\r\n};\r\n\r\n// Dashboard/Analytics API\r\nexport const analyticsApi = {\r\n  getDashboard: () => apiRequest('/hospital/dashboard'),\r\n  getAnalytics: () => apiRequest('/hospital/analytics'),\r\n  getAppointmentStatistics: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/appointments/statistics?${queryParams.toString()}`);\r\n  },\r\n  getBillingStatistics: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    return apiRequest(`/billing/statistics?${queryParams.toString()}`);\r\n  },\r\n};\r\n"
        }
    ]
}